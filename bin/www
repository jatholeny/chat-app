#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatexample:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create socket
 */
var io = require('socket.io')(server);
var clients = [];
var newUserbol = true;
var socketsArr = [];

io.sockets.on('connection',function(socket){
    console.log('a user connected with socket id : ' +socket.id);

    socket.on('chat message',function(msg){

        console.log('inside chat msg');
        console.log(msg.message);
        console.log(msg.user);
        console.log(msg.user_id);
        console.log(msg.sendToId);
        console.log('send to socket : ' +msg.sendToId);

        socket.user = msg.user;
        socket.user_id = msg.user_id;

        if(socketsArr.indexOf(msg.sendToId) !== -1){
            console.log(socketsArr);
            console.log('sending : ' +msg.sendToId);
           // io.to(msg.sendToId).emit('chat message', {user: socket.user, user_id: socket.user_id, message: msg.message});
            io.sockets.connected[msg.sendToId].emit('chat message', {user: socket.user, user_id: socket.user_id, message: msg.message});
            console.log('sent');
        }
    });

    socket.on('store id', function(msg){

        for(var i =0;i<clients.length; i++){
            if(clients[i].id === msg.id) {
                newUserbol = false;
                break;
            }
        }
        if(newUserbol === true){
            var newUser = {};
            newUser.name = msg.name;
            newUser.id = msg.id;
            newUser.socketId = socket.id;
            clients.push(newUser);
            socketsArr.push(socket.id);
            socket.emit('your id', socket.id);
        }
        console.log(clients);
        io.sockets.emit('all ids', clients);
        newUserbol = true;
    });

    socket.on('disconnect',function(){
        console.log('user disconeted with socket id : ' +socket.id);

        for(var i = 0 ; i < clients.length ; i++){
            if(clients[i].socketId === socket.id){
                clients.splice(i,1);
                socket.broadcast.emit('user disconnected', clients);
                break;
            }
        }

        if(socketsArr.indexOf(socket.id) !== -1){
            var index = socketsArr.indexOf(socket.id);
            socketsArr.splice(index,1);
        }
        console.log('user disconnected');
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
